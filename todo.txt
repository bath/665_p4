1) change main.cpp to stuff on piazza, talk with chris?
2) types and error checking stuff ... need to read through project details more thoroughly
    three main error types
        * More than one declaration of an identifier in a given scope	  -- isInCurrentScope & lookUp
            when declaring an id, ensure it doesn't already exist
        * Use of an undeclared identifier	 -- isInCurrentScope & lookUp
            when using an id, ensure that it does exist
        * Bad declaration type (variable or parameter of void type) -- isCorrectType
            when declaring an id, ensure it has a proper type  
                possible types: 
                    int intptr bool boolptr char charptr
                    void if else while return true false
                    FROMCONSOLE TOCONSOLE NULLPTR
                    varDecl:
                        int, inptr, bool, boolptr, char, charptr
                    fnDecl:
                        int, inptr, bool, boolptr, char, charptr, void
3) when is mySymbol for IDNodes set? is it going to be defined? this could be a problem
    do we also need to check if the typenode is a pointer?
    const bool isPtr priv var for each typeNode

Declaration Nodes
    The only time we care about type checking is when an identifer is being declared for the first time
    There three cases in which an identifier can be declared
        1. Function Declaration Node
        2. Variable Declaration Node
        3. Formal Declaration Node (parameters of a function)
    So... in each case, what are the member variables for each of those nodes?
        1. Function Declaration Node
            a. IDNode
            b. TypeNode
            c. list of formals
            d. list of statement nodes
        2. Variable Declaration Node
            a. TypeNode
            b. IDNode
        3. Formal Declaration Node (parameters of a function)
            a. Has nothing?
                i. Will this be a problem?
                        -- !! not sure, come back later
    function and variable have in common: TypeNode and IDNode
        IDNode will be useless to use because it doesn't have carry the type, just the id name
        So, in isCorrectType(), we will want to pass a TypeNode to them
            These TypeNodes are accessible through the parent's fnDecl and varDecl with a function I will have to define

TypeNode   
    When taking in a TypeNode, we can have a few possibilities:
        1. VoidTypeNode
        2. IntTypeNode
        3. BoolTypeNode
        4. CharTypeNode




Todos:
1) figure out how to deal with formaldeclnode
2) check to make sure my error spec is good
3) figure out the mess that is mysymbol / adding new symbols to the hashmap
4) will i need to track the scope for each symbol? how are we going to manage that?
5) identifiy other nodes that will create new scopes
6) think about how fndecl will work with its:
    a. actuals
    b. return type
    c. stmt list?
7) will an fndecl with random nodetype get caught in the scanner or will i have to make sure it is valid like vardecl?
8) can you declare and/or define functions in functions?
9) am i supposed to be putting in code somewhere that will actually kick off all nameAnalysis()? -- check where syntax stuff is kicked off, main.cpp?
10) what is this throw todo error? did clay use that?

In case of errors:
1) will i need a virtual function for getType() in typenode? since all literal children have getType() ??
2) when will we be using over ride = 0 and virtual?


Questions:
1) are virtual functions needed? is it more of a nice thing to have?
    ex: declnode isn't going to define its own getTypeNode bc it has no typenode member var, so is it really needed to be virtual?
    when to decide if you should have just child methods vs creating virtual in parents?
    1.1) what is over ride = 0? are they two things?
2) when creating a new object and using the constructor and passing in variables, how do the variables get set?
    2.1) are they automatically mapped to the memeber variables or must we define the constrcutor to map them?
            i think we have to create the definition to map them